/* The following code was generated by JFlex 1.4.1 on 18/06/24, 10:46 am */

/*
 * Copyright (C) 2024, 2024 Oracle and/or its affiliates.
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * https://oss.oracle.com/licenses/upl/
 */

/*
 * The NoSQLTokenMaker.flex file is inspired from the SQLTokenMaker.flex file, available open-source.
 * The original SQLTokenMaker.flex can be found at:
 * https://github.com/bobbylight/RSyntaxTextArea/blob/master/RSyntaxTextArea/src/main/java/org/fife/ui/rsyntaxtextarea/modes/SQLTokenMaker.flex
 *
 * The NoSQLTokenMaker.java file is generated from NoSQLTokenMaker.flex
 * using the jflex tool, version 1.4.0.
 *
 * Please refer this documentation to know more:
 * https://github.com/bobbylight/RSyntaxTextArea/wiki/Adding-Syntax-Highlighting-for-a-new-Language
 */

package oracle.nosql.intellij.plugin.recordView;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

import java.io.IOException;
import java.io.Reader;

/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>SQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 */

public class NoSQLTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int MLC = 3;
  public static final int CHAR = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\25\0\1\4\1\0\1\51\4\0\1\52\2\15"+
    "\1\13\1\11\1\0\1\12\1\17\1\14\12\3\1\16\1\0\1\10"+
    "\1\7\1\6\2\0\1\21\1\37\1\22\1\27\1\20\1\41\1\45"+
    "\1\40\1\31\1\46\1\47\1\32\1\30\1\25\1\23\1\42\1\2"+
    "\1\33\1\36\1\26\1\24\1\50\1\34\1\43\1\35\1\44\1\53"+
    "\1\0\1\54\1\0\1\5\1\0\1\21\1\37\1\22\1\27\1\20"+
    "\1\41\1\45\1\40\1\31\1\46\1\47\1\32\1\30\1\25\1\23"+
    "\1\42\1\2\1\33\1\36\1\26\1\24\1\50\1\34\1\43\1\35"+
    "\1\44\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\5\5\1\6"+
    "\1\1\1\7\27\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\13\1\16\1\17\1\13\1\20\1\13\1\0"+
    "\1\21\1\22\11\1\1\23\6\1\3\23\7\1\1\23"+
    "\2\1\1\23\13\1\1\23\1\1\1\23\37\1\1\24"+
    "\1\13\1\25\1\7\1\0\47\1\1\26\26\1\1\23"+
    "\31\1\1\23\25\1\1\23\6\1\1\23\24\1\1\26"+
    "\46\1\1\23\222\1\1\26\26\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\264\0\u0195\0\u01c2\0\u01ef\0\264\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\264\0\264\0\u0681\0\u06ae\0\264\0\u06db\0\u0708\0\264"+
    "\0\u0735\0\u0762\0\264\0\u078f\0\u07bc\0\u07e9\0\264\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\341\0\u0d2f\0\u0d5c\0\u0d89"+
    "\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u0ca8\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\264\0\264\0\264\0\u14eb\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8"+
    "\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950"+
    "\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8"+
    "\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20"+
    "\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88"+
    "\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058"+
    "\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328"+
    "\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490"+
    "\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8"+
    "\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u1bf3\0\u286e\0\u289b"+
    "\0\u28c8\0\u28f5\0\u1bf3\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6"+
    "\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e"+
    "\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6"+
    "\0\u2cd3\0\341\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1"+
    "\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49"+
    "\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1"+
    "\0\u30de\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219"+
    "\0\u3246\0\u3273\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381"+
    "\0\u33ae\0\u33db\0\u3408\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9"+
    "\0\u3516\0\u3543\0\u3570\0\u359d\0\u35ca\0\u35f7\0\u3624\0\u3651"+
    "\0\u367e\0\u36ab\0\u36d8\0\u3705\0\u3732\0\u375f\0\u378c\0\u37b9"+
    "\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a\0\u38c7\0\u38f4\0\u3921"+
    "\0\u394e\0\u397b\0\u39a8\0\u39d5\0\u3a02\0\u3a2f\0\u3a5c\0\u3a89"+
    "\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1"+
    "\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59"+
    "\0\u3d86\0\u3db3\0\u3de0\0\u3e0d\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1"+
    "\0\u3eee\0\u3f1b\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029"+
    "\0\u4056\0\u4083\0\u40b0\0\u40dd\0\u410a\0\u4137\0\u4164\0\u4191"+
    "\0\u41be\0\u41eb\0\u4218\0\u4245\0\u4272\0\u429f\0\u42cc\0\u42f9"+
    "\0\u4326\0\u4353\0\u4380\0\u43ad\0\u43da\0\u4407\0\u4434\0\u4461"+
    "\0\u448e\0\u44bb\0\u44e8\0\u4515\0\u4542\0\u456f\0\u459c\0\u45c9"+
    "\0\u45f6\0\u4623\0\u4650\0\u467d\0\u46aa\0\u46d7\0\u4704\0\u4731"+
    "\0\u475e\0\u478b\0\u47b8\0\u47e5\0\u4812\0\u483f\0\u486c\0\u4899"+
    "\0\u48c6\0\u48f3\0\u4920\0\u494d\0\u497a\0\u49a7\0\u49d4\0\u4a01"+
    "\0\u4a2e\0\u4a5b\0\u4a88\0\u4ab5\0\u4ae2\0\u4b0f\0\u4b3c\0\u4b69"+
    "\0\u4b96\0\u4bc3\0\u4bf0\0\u4c1d\0\u4c4a\0\u4c77\0\u4ca4\0\u4cd1"+
    "\0\u4cfe\0\u4d2b\0\u4d58\0\u4d85\0\u4db2\0\u4ddf\0\u4e0c\0\u4e39"+
    "\0\u4e66\0\u4e93\0\u4ec0\0\u4eed\0\u4f1a\0\u4f47\0\u4f74\0\u4fa1"+
    "\0\u4fce\0\u4ffb\0\u5028\0\u5055\0\u5082\0\u50af\0\u50dc\0\u5109"+
    "\0\u5136\0\u5163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\13\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\7\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\5\1\54\1\55\47\54\1\56"+
    "\3\54\1\57\1\60\50\57\1\61\2\57\1\62\1\63"+
    "\11\62\1\64\41\62\57\0\2\7\1\0\1\7\12\0"+
    "\31\7\7\0\1\10\13\0\1\21\1\65\40\0\1\11"+
    "\57\0\1\13\53\0\2\13\57\0\1\66\55\0\1\67"+
    "\43\0\1\7\15\0\31\7\7\0\1\21\14\0\1\65"+
    "\36\0\2\7\1\0\1\7\12\0\5\7\1\70\4\7"+
    "\1\71\3\7\1\72\4\7\1\73\5\7\6\0\2\7"+
    "\1\0\1\7\12\0\2\7\1\74\2\7\1\75\1\7"+
    "\1\76\2\7\1\77\1\100\2\7\1\101\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\102\1\7\1\103"+
    "\1\104\6\7\1\105\1\7\1\106\13\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\107\1\110\5\7\1\111"+
    "\5\7\1\112\6\7\1\113\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\114\1\115\10\7\1\116\3\7\1\117"+
    "\6\7\6\0\2\7\1\0\1\7\12\0\1\120\1\121"+
    "\1\7\1\122\1\123\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\124\1\7\1\125\2\7\1\126\6\7"+
    "\1\127\2\7\1\130\10\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\131\1\132\7\7\1\133\1\7\1\134\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\135\1\7"+
    "\1\136\5\7\1\137\1\7\1\140\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\141\1\7\1\142\6\7"+
    "\1\143\2\7\1\125\7\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\144\1\145\1\7\1\146\5\7\1\147\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\150\2\7\1\151"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\1\152\10\7"+
    "\1\153\6\7\1\154\10\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\155\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\156\1\7\1\157\3\7\1\160\2\7\1\161\6\7"+
    "\1\162\10\7\6\0\2\7\1\0\1\7\12\0\1\163"+
    "\14\7\1\125\13\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\164\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\165\1\166\4\7\1\167\1\7\1\170\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\171\1\172\2\7"+
    "\1\173\6\7\1\174\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\175\12\7\1\176\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\177\12\7\1\200\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\201\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\202\27\7\4\0\54\53"+
    "\1\203\1\54\1\0\47\54\1\0\3\54\51\0\1\204"+
    "\3\0\1\57\1\0\50\57\1\0\2\57\52\0\1\204"+
    "\2\0\1\62\1\0\11\62\1\0\41\62\14\0\1\205"+
    "\43\0\1\206\5\0\2\207\42\0\1\66\1\0\53\66"+
    "\2\0\2\7\1\0\1\7\12\0\7\7\1\125\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\210\15\7\1\211"+
    "\12\7\6\0\2\7\1\0\1\212\12\0\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\213\2\7\1\214"+
    "\10\7\1\215\6\7\6\0\2\7\1\0\1\7\12\0"+
    "\2\7\1\216\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\2\7\1\217\4\7\1\125\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\7\7\1\125\1\177\20\7\6\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\220\3\7\1\125\1\7"+
    "\1\221\14\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\222\15\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\125\26\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\223\13\7\1\224\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\225\3\7\1\226\1\7\1\227\16\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\230\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\231\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\232\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\220\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\233\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\220\21\7\6\0"+
    "\2\7\1\0\1\7\12\0\21\7\1\234\7\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\235\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\70\17\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\236\3\7\1\237\1\240"+
    "\6\7\1\241\7\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\242\10\7\1\243\17\7\6\0\2\7\1\0\1\7"+
    "\12\0\7\7\1\231\6\7\1\244\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\16\7\1\245\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\246\2\7\1\247\20\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\125\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\12\7\1\250\16\7"+
    "\6\0\2\7\1\0\1\7\12\0\17\7\1\251\11\7"+
    "\6\0\2\7\1\0\1\7\12\0\12\7\1\125\16\7"+
    "\6\0\2\7\1\0\1\7\12\0\22\7\1\211\6\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\252\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\253\7\7\1\254"+
    "\3\7\1\255\2\7\1\256\7\7\6\0\2\7\1\0"+
    "\1\7\12\0\15\7\1\257\13\7\6\0\2\7\1\0"+
    "\1\7\12\0\16\7\1\260\12\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\261\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\23\7\1\262\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\5\7\1\263\1\7\1\264\21\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\265\2\7\1\266"+
    "\4\7\1\267\16\7\6\0\2\7\1\0\1\270\12\0"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\2\7\1\271"+
    "\3\7\1\272\1\273\6\7\1\244\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\274\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\275\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\21\7\1\173\7\7\6\0\2\7\1\0"+
    "\1\7\12\0\16\7\1\173\12\7\6\0\2\7\1\0"+
    "\1\7\12\0\2\7\1\276\26\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\277\10\7\1\300\7\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\301\1\7\1\302"+
    "\14\7\1\303\2\7\1\304\6\0\2\7\1\0\1\7"+
    "\12\0\12\7\1\305\1\7\1\306\14\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\307\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\310\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\311\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\312\27\7\6\0\1\313\1\7\1\0"+
    "\1\7\12\0\2\7\1\314\3\7\1\125\3\7\1\315"+
    "\16\7\6\0\2\7\1\0\1\7\12\0\20\7\1\316"+
    "\10\7\6\0\2\7\1\0\1\7\12\0\1\7\1\317"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\24\7\1\320"+
    "\4\7\6\0\2\7\1\0\1\7\12\0\1\7\1\321"+
    "\1\7\1\322\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\6\7\1\323\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\324\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\13\7\1\325\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\326\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\13\7\1\145\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\327\2\7\1\330\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\125\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\331\2\7\1\332\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\333\10\7\1\334\17\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\335\1\7\1\336"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\1\7\1\225"+
    "\1\7\1\337\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\252\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\252\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\15\7\1\340\13\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\341\16\7\7\0\1\206\53\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\342\20\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\125\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\343\2\7\1\344\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\345\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\16\7\1\346\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\347\17\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\350\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\351\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\171\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\352\27\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\353\27\7\6\0\2\7\1\0\1\7"+
    "\12\0\20\7\1\211\10\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\125\1\7\1\354\3\7\1\125\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\173\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\355\20\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\356\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\357\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\360\27\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\211\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\15\7\1\125\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\361\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\362\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\145\30\7\6\0\1\363"+
    "\1\7\1\0\1\7\12\0\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\364\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\13\7\1\365\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\13\7\1\366\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\5\7\1\367\23\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\317\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\370\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\371\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\372\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\373\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\305\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\125\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\374\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\360\30\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\375\26\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\376\27\7\6\0\2\7\1\0\1\7\12\0\16\7"+
    "\1\125\12\7\6\0\2\7\1\0\1\7\12\0\6\7"+
    "\1\377\22\7\6\0\2\7\1\0\1\7\12\0\22\7"+
    "\1\125\6\7\6\0\2\7\1\0\1\7\12\0\30\7"+
    "\1\u0100\6\0\2\7\1\0\1\7\12\0\6\7\1\u0101"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\11\7\1\u0102"+
    "\17\7\6\0\2\7\1\0\1\7\12\0\13\7\1\246"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\4\7\1\u0103"+
    "\23\7\1\u0100\6\0\2\7\1\0\1\7\12\0\12\7"+
    "\1\u0104\16\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\u0105\26\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\u0106\15\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\125\25\7\6\0\2\7\1\0\1\7\12\0\1\u0107"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u0108"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\14\7\1\u0109"+
    "\14\7\6\0\2\7\1\0\1\7\12\0\1\7\1\126"+
    "\25\7\1\125\1\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\173\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u010a\30\7\6\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u010b\24\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u010c\1\7\1\u010d\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u010e\10\7\1\u010f\17\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\u0110\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\366\30\7\6\0\2\7\1\0\1\u0111"+
    "\12\0\31\7\6\0\2\7\1\0\1\7\12\0\27\7"+
    "\1\u0112\1\7\6\0\2\7\1\0\1\7\12\0\20\7"+
    "\1\125\10\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\125\5\7\1\211\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\u0112\15\7\6\0\2\7\1\0\1\u0113"+
    "\12\0\31\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\u0114\25\7\6\0\2\7\1\0\1\7\12\0\1\u0115"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\1\u0116\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\173\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0112\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\70\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\125\14\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\u0117\14\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\257\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\u0118\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\u0119\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u011a\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\125\13\7\1\130\4\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u011b\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u011c\12\7"+
    "\6\0\2\7\1\0\1\7\12\0\21\7\1\u011d\7\7"+
    "\6\0\2\7\1\0\1\7\12\0\10\7\1\u011e\20\7"+
    "\6\0\2\7\1\0\1\u011f\12\0\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u0120\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\4\7\1\261\24\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\u0121\12\7\1\125\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u0122\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0123\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u0124\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\20\7\1\u0125\10\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u0115\27\7\6\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\373\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\13\7\1\u0126\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\4\7\1\225\24\7\6\0\2\7\1\0"+
    "\1\7\12\0\16\7\1\u0127\12\7\6\0\2\7\1\0"+
    "\1\7\12\0\15\7\1\373\13\7\6\0\2\7\1\0"+
    "\1\7\12\0\15\7\1\u0128\13\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u0129\27\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\225\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u012a\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u012b\30\7\6\0\2\7\1\0\1\7\12\0\6\7"+
    "\1\211\22\7\6\0\2\7\1\0\1\7\12\0\1\173"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\13\7\1\u012c"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\4\7\1\211"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u012d"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\1\327\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\25\7\1\125\3\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\70\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\u012e\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\u012f\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\u0130\27\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0131\12\7\1\u0132\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u0133\24\7"+
    "\6\0\2\7\1\0\1\7\12\0\11\7\1\u0134\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u0135\27\7"+
    "\6\0\2\7\1\0\1\7\12\0\20\7\1\u0112\10\7"+
    "\6\0\2\7\1\0\1\7\12\0\21\7\1\u0136\7\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u0137\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\11\7\1\371\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\u0138\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\226\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\23\7\1\u0139\5\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u013a\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\152\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\u013b\22\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\u013c\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\u013d\17\7\6\0\2\7"+
    "\1\0\1\7\12\0\30\7\1\211\6\0\2\7\1\0"+
    "\1\7\12\0\23\7\1\u013e\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\u013f\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\27\7\1\211\1\7\6\0\2\7\1\0"+
    "\1\7\12\0\16\7\1\u0140\12\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u0141\1\u0142\3\7\1\u0143\1\7"+
    "\1\u0144\5\7\1\u0145\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u0146\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\173\26\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u0147\20\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\130\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u0148\30\7\6\0\2\7\1\0\1\7\12\0\6\7"+
    "\1\u0149\22\7\6\0\2\7\1\0\1\7\12\0\24\7"+
    "\1\211\4\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u014a\17\7\6\0\2\7\1\0\1\7\12\0\14\7"+
    "\1\u014b\14\7\6\0\2\7\1\0\1\7\12\0\1\u014c"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u014d"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\5\7\1\37"+
    "\1\7\1\u014e\1\7\1\u014f\2\7\1\u0150\14\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\u0151\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\21\7\1\125\7\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\373\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u0152\23\7\6\0\2\7"+
    "\1\0\1\7\12\0\22\7\1\u0153\6\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u0154\27\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u0155\27\7\6\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\u0156\22\7\6\0\2\7"+
    "\1\0\1\u0157\12\0\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\7\7\1\211\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\u0158\26\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u0159\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\11\7\1\u0129\17\7\6\0\2\7\1\0\1\7"+
    "\12\0\27\7\1\125\1\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u015a\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\22\7\1\u015b\6\7\6\0\2\7\1\0\1\7\12\0"+
    "\13\7\1\211\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u015c\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u015d\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\173\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u0115\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\363\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u015e\3\7\1\125\13\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\257\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\u015f\24\7\6\0\2\7\1\0\1\u0111"+
    "\12\0\1\373\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u0160\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u0161\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u0162\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u0163\23\7\6\0\2\7\1\0\1\u0164\12\0"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\5\7\1\366"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u0165"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\30\7\1\u0166"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\u0167\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\u0168\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u0169\7\7"+
    "\1\u016a\17\7\6\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u016b\24\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\257\21\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\125\27\7\6\0\2\7\1\0\1\u016c\12\0\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u016d\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u016e\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\321\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\u016f\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\233\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\11\7\1\u0170\17\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u0171\10\7\1\u0172"+
    "\12\7\6\0\2\7\1\0\1\7\12\0\11\7\1\u0173"+
    "\17\7\6\0\2\7\1\0\1\7\12\0\1\7\1\245"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u0174"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\12\7\1\u0175"+
    "\16\7\6\0\2\7\1\0\1\7\12\0\13\7\1\u0176"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u0177"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\3\7\1\u0178"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u0179"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u017a"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u017b"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u017c"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u017d"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u017e"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\17\7\1\211"+
    "\11\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u017f"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\5\7\1\107"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\6\7\1\233"+
    "\12\7\1\u0180\7\7\6\0\2\7\1\0\1\7\12\0"+
    "\10\7\1\211\20\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\243\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u0181\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\u0182\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u0183\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\25\7\1\u0112\3\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\u0184\1\u0185\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\u0186\27\7\6\0\2\7\1\0\1\7"+
    "\12\0\23\7\1\u0112\5\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u0112\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u0112\20\7\6\0\2\7\1\0\1\7"+
    "\12\0\11\7\1\u0187\10\7\1\u0188\6\7\6\0\2\7"+
    "\1\0\1\7\12\0\23\7\1\173\5\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\u0189\17\7\6\0\2\7"+
    "\1\0\1\u018a\12\0\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\16\7\1\u018b\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u018c\7\7\1\u018d\12\7\6\0\2\7"+
    "\1\0\1\u018e\12\0\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u018f\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\u0121\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\11\7\1\u0190\17\7\6\0\2\7\1\0\1\7"+
    "\12\0\7\7\1\373\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\11\7\1\u0191\17\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\373\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\u0192\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\11\7\1\200\17\7\6\0\2\7\1\0\1\u0193"+
    "\12\0\31\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\u0194\25\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\305\26\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u0195\27\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u0196\27\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\370\17\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\u0197\23\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u0198\17\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\u0199\15\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\u019a\23\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\u019b\26\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\u019c\23\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\u019d\23\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\u019e\15\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\u016a\25\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u019f\10\7\1\u0188\6\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u01a0\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u01a1\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u01a2\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\25\7\1\u01a3\3\7\6\0\2\7\1\0\1\7\12\0"+
    "\20\7\1\u01a4\10\7\6\0\2\7\1\0\1\7\12\0"+
    "\2\7\1\u01a5\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u01a6\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\u01a7\16\7\6\0\2\7\1\0\1\7\12\0"+
    "\6\7\1\u01a8\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u01a9\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\346\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\6\7\1\u01aa\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\25\7\1\u01ab\3\7\6\0\2\7\1\0\1\7\12\0"+
    "\27\7\1\320\1\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u01ac\27\7\6\0\2\7\1\0\1\7\12\0"+
    "\6\7\1\u0112\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u019a\27\7\6\0\2\7\1\0\1\7\12\0"+
    "\16\7\1\u01ad\12\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u01ae\21\7\6\0\2\7\1\0\1\7\12\0"+
    "\11\7\1\u01af\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u01b0\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u01b1\27\7\6\0\2\7\1\0\1\7\12\0"+
    "\13\7\1\u01b2\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\320\21\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u01b3\30\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u01b4\17\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\373\27\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\u017b\23\7\6\0\2\7\1\0\1\7\12\0\12\7"+
    "\1\315\16\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u01b5\17\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\u0112\21\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u01b6\17\7\6\0\2\7\1\0\1\u01b7\12\0\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\25\7\1\u01b8\3\7"+
    "\6\0\2\7\1\0\1\7\12\0\21\7\1\u01b9\7\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u01ba\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\u01bb\20\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u01bc\21\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u01bd\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\u01be\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\u01bf\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u01c0\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\u01c1\20\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\u01c2\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u01c3\10\7\1\u01c4"+
    "\10\7\6\0\2\7\1\0\1\7\12\0\1\u01c5\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\u01c6\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\23\7\1\125\5\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u01c7\27\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u01c8\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\320\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u01c9\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\u01ca\20\7\6\0\2\7"+
    "\1\0\1\u01cb\12\0\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u01cc\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u01cd\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u01ce\27\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u01cf\25\7\6\0\2\7\1\0\1\u01d0\12\0"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\13\7\1\u01d1"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\13\7\1\u01d2"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\23\7\1\u0122"+
    "\5\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u019a"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\1\u01d3\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u014e\21\7"+
    "\6\0\2\7\1\0\1\u01d4\12\0\31\7\6\0\2\7"+
    "\1\0\1\u01d5\12\0\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\15\7\1\u01d6\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\u01d7\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\16\7\1\u01d8\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\125\20\7\6\0\2\7\1\0\1\7"+
    "\12\0\15\7\1\u01d9\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u01da\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u01db\20\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u01dc\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\16\7\1\u0112\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\u01d6\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\11\7\1\161\17\7\6\0\2\7\1\0\1\u01dd"+
    "\12\0\31\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\u01de\15\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u01df\17\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u01e0\17\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u0187\17\7\6\0\2\7\1\0\1\7\12\0\15\7"+
    "\1\u0112\13\7\6\0\2\7\1\0\1\7\12\0\12\7"+
    "\1\u01e1\16\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\320\20\7\6\0\2\7\1\0\1\7\12\0\12\7"+
    "\1\u01e2\16\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\u01d6\17\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\4\1\1\11\3\1\1\11\31\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\113\1\3\11\1\1\1\0\u015b\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public NoSQLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Overridden to return <code>true</code> so paren matching occurs for
	 * SQL.
	 *
	 * @return <code>true</code> always.
	 */
	@Override
	public boolean getCurlyBracesDenoteCodeBlocks(int languageIndex) {
		return true;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "--", null };
	}


	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = STRING;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = CHAR;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = YYINITIAL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NoSQLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public NoSQLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 25: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 26: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 27: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 28: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(CHAR);
          }
        case 29: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 30: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 33: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 34: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 36: break;
        case 17: 
          { addToken(Token.COMMENT_EOL);
          }
        case 37: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 38: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 10: 
          { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 483: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 484: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 485: break;
            case CHAR: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 486: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
